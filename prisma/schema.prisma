// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STUDENT
  INSTRUCTOR
}

enum Status {
  BLOCKED
  ACTIVE
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String?
  phone    String?
  password String
  role     UserRole @default(STUDENT)
  status   Status   @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student    Student?
  instructor Instructor?
  admin      Admin?
}

model Student {
  id           String      @id @unique @default(uuid())
  email        String      @unique
  name         String
  profilePhoto String?
  contact      String?
  address      String?
  gender       Gender
  Payment      Payment[]
  classroom    Classroom[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

model Instructor {
  id           String      @id @unique @default(uuid())
  email        String      @unique
  name         String?
  profilePhoto String?
  contact      String?
  address      String?
  gender       Gender?
  classroom    Classroom[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Admin {
  id           String  @id @unique @default(uuid())
  email        String  @unique
  name         String?
  profilePhoto String?
  contact      String?
  address      String?
  gender       Gender?

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model Course {
  id          String     @id @default(uuid())
  title       String
  description String
  price       Float
  isPublished Boolean    @default(false)
  modules     Module[]
  payment     Payment[]
  student     Student[]
  classroom   Classroom?
}

model Classroom {
  Course   Course @relation(fields: [courseId], references: [id])
  courseId String @unique

  Instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId String
  Student      Student    @relation(fields: [studentId], references: [id])
  studentId    String

  @@id([courseId, instructorId, studentId])
}

model Module {
  id       String    @id @default(uuid())
  title    String
  course   Course?   @relation(fields: [courseId], references: [id])
  courseId String?
  content  Content[]
}

model Content {
  id           String        @id @default(uuid())
  title        String
  video        String?
  description  String?
  assignment   String?
  Module       Module?       @relation(fields: [moduleId], references: [id])
  moduleId     String?
  QuizInstance QuizInstance?
}

model QuizInstance {
  id           String  @id @default(uuid())
  quiz         Quiz[]
  totalMark    Int
  acquiredMark Int
  content      Content @relation(fields: [contentId], references: [id])
  contentId    String  @unique
}

model Quiz {
  id             String        @id @default(uuid())
  question       String
  options        String[]
  correctAnswer  Int?
  QuizInstance   QuizInstance? @relation(fields: [quizInstanceId], references: [id])
  quizInstanceId String?
}

model Payment {
  id             String   @id @default(uuid())
  courseId       String
  amount         Float
  status         String
  stripeChargeId String?
  course         Course[]
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      String
}
